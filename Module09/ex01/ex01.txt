Exercise 01: Reverse Polish Notation
Exercise : 01
RPN
Turn-in directory : ex01/
Files to turn in : Makefile, main.cpp, RPN.{cpp, hpp}
Forbidden functions : None
You must create a program with these constraints:
• The program name is RPN.
• Your program must take an inverted Polish mathematical expression as an argu-
ment.
• The numbers used in this operation and passed as arguments will always be less
than 10. The calculation itself but also the result do not take into account this rule.
• Your program must process this expression and output the correct result on the
standard output.
• If an error occurs during the execution of the program an error message should be
displayed on the standard error.
• Your program must be able to handle operations with these tokens: "+ - / *".
You must use at least one container in your code to validate this
exercise.
You don’t need to handle brackets or decimal numbers.
Here is an example of standard usage:
$> ./RPN "8 9 * 9 - 9 - 9 - 4 - 1 +"
42
$> ./RPN "7 7 * 7 -"
42
$> ./RPN "1 2 * 2 / 2 * 2 4 - +"
0
$> ./RPN "(1 + 1)"
Error
$>
Warning: The container(s) you used in the previous exercise are
forbidden here. The container(s) you used to validate this exercise
will not be usable for the rest of this module.


### File: main.cpp
#include "RPN.hpp"
#include <iostream>

int main(int argc, char* argv[]) {
    if (argc != 2) {
        std::cerr << "Usage: " << argv[0] << " \"RPN expression\"" << std::endl;
        return 1;
    }

    RPN calculator;
    try {
        int result = calculator.evaluate(argv[1]);
        std::cout << result << std::endl;
    } catch (const std::exception& e) {
        std::cerr << e.what() << std::endl;
        return 1;
    }

    return 0;
}


### File: RPN.cpp
#include "RPN.hpp"
#include <sstream>
#include <iostream>
#include <cstdlib>
#include <stdexcept>

RPN::RPN() {}

RPN::RPN(const RPN& other) {
    _stack = other._stack;
}

RPN::~RPN() {}

RPN& RPN::operator=(const RPN& other) {
    if (this != &other) {
        _stack = other._stack;
    }
    return *this;
}

bool RPN::isOperator(const char c) const {
    return c == '+' || c == '-' || c == '*' || c == '/';
}

void RPN::performOperation(const char op) {
    if (_stack.size() < 2) {
        throw InvalidExpressionException();
    }

    int b = _stack.top(); _stack.pop();
    int a = _stack.top(); _stack.pop();
    int result;

    switch (op) {
        case '+': result = a + b; break;
        case '-': result = a - b; break;
        case '*': result = a * b; break;
        case '/': 
            if (b == 0) throw DivisionByZeroException();
            result = a / b; 
            break;
        default:
            throw InvalidExpressionException();
    }
    _stack.push(result);
}

void RPN::processToken(const std::string& token) {
    if (token.length() == 1 && isOperator(token[0])) {
        performOperation(token[0]);
    } else {
        // Check if it's a number
        for (size_t i = 0; i < token.length(); ++i) {
            if (!isdigit(token[i])) {
                throw InvalidExpressionException();
            }
        }
        int num = atoi(token.c_str());
        _stack.push(num);
    }
}

int RPN::evaluate(const std::string& expression) {
    std::istringstream iss(expression);
    std::string token;
    
    while (iss >> token) {
        try {
            processToken(token);
        } catch (const std::exception& e) {
            throw;
        }
    }

    if (_stack.size() != 1) {
        throw InvalidExpressionException();
    }

    return _stack.top();
}

const char* RPN::InvalidExpressionException::what() const throw() {
    return "Error";
}

const char* RPN::DivisionByZeroException::what() const throw() {
    return "Error: division by zero";
}

### File: RPN.hpp
#ifndef RPN_HPP
#define RPN_HPP

#include <stack>
#include <string>
#include <exception>

class RPN {
private:
    std::stack<int> _stack;
    
    bool isOperator(const char c) const;
    void performOperation(const char op);
    void processToken(const std::string& token);

public:
    RPN();
    RPN(const RPN& other);
    ~RPN();
    RPN& operator=(const RPN& other);

    int evaluate(const std::string& expression);
    
    class InvalidExpressionException : public std::exception {
        public: virtual const char* what() const throw();
    };
    
    class DivisionByZeroException : public std::exception {
        public: virtual const char* what() const throw();
    };
};

#endif


