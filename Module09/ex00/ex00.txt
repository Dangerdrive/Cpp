Exercise 00: Bitcoin Exchange
Exercise : 00
Bitcoin Exchange
Turn-in directory : ex00/
Files to turn in : Makefile, main.cpp, BitcoinExchange.{cpp, hpp}
Forbidden functions : None
You have to create a program which outputs the value of a certain amount of bitcoin
on a certain date.
This program must use a database in csv format which will represent bitcoin price
over time. This database is provided with this subject.
The program will take as input a second database, storing the different prices/dates
to evaluate.
Your program must respect these rules:
• The program name is btc.
• Your program must take a file as an argument.
• Each line in this file must use the following format: "date | value".
• A valid date will always be in the following format: Year-Month-Day.
• A valid value must be either a float or a positive integer, between 0 and 1000.
You must use at least one container in your code to validate this
exercise. You should handle possible errors with an appropriate
error message.

Here is an example of an input.txt file:
$> head input.txt
date | value
2011-01-03 | 3
2011-01-03 | 2
2011-01-03 | 1
2011-01-03 | 1.2
2011-01-09 | 1
2012-01-11 | -1
2001-42-42
2012-01-11 | 1
2012-01-11 | 2147483648
$>
Your program will use the value in your input file.
Your program should display on the standard output the result of the value multiplied
by the exchange rate according to the date indicated in your database.
If the date used in the input does not exist in your DB then you
must use the closest date contained in your DB. Be careful to use the
lower date and not the upper one.
The following is an example of the program’s use.
$> ./btc
Error: could not open file.
$> ./btc input.txt
2011-01-03 => 3 = 0.9
2011-01-03 => 2 = 0.6
2011-01-03 => 1 = 0.3
2011-01-03 => 1.2 = 0.36
2011-01-09 => 1 = 0.32
Error: not a positive number.
Error: bad input => 2001-42-42
2012-01-11 => 1 = 7.1
Error: too large a number.
$>
Warning: The container(s) you use to validate this exercise will no
longer be usable for the rest of this module.




### File: main.cpp
#include "BitcoinExchange.hpp"
#include <iostream>

int main(int argc, char* argv[]) {
    if (argc != 2) {
        std::cerr << "Error: could not open file." << std::endl;
        return 1;
    }
    
    try {
        BitcoinExchange exchange("data.csv");
        exchange.processInputFile(argv[1]);
    } catch (const std::exception& e) {
        std::cerr << e.what() << std::endl;
        return 1;
    }
    
    return 0;
}

### File: BitcoinExchange.cpp
#include "BitcoinExchange.hpp"
#include <fstream>
#include <sstream>
#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <ctime>

BitcoinExchange::BitcoinExchange() {}

BitcoinExchange::BitcoinExchange(const std::string& databaseFile) {
    loadDatabase(databaseFile);
}

BitcoinExchange::BitcoinExchange(const BitcoinExchange& other) {
    _exchangeRates = other._exchangeRates;
}

BitcoinExchange::~BitcoinExchange() {}

BitcoinExchange& BitcoinExchange::operator=(const BitcoinExchange& other) {
    if (this != &other) {
        _exchangeRates = other._exchangeRates;
    }
    return *this;
}

void BitcoinExchange::loadDatabase(const std::string& databaseFile) {
    std::ifstream file(databaseFile.c_str());
    if (!file.is_open()) {
        throw std::runtime_error("Error: could not open database file.");
    }

    std::string line;
    // Skip header line
    std::getline(file, line);
    
    while (std::getline(file, line)) {
        std::istringstream iss(line);
        std::string date;
        std::string rateStr;
        
        if (std::getline(iss, date, ',') && std::getline(iss, rateStr)) {
            float rate = std::atof(rateStr.c_str());
            _exchangeRates[date] = rate;
        }
    }
    file.close();
}

bool BitcoinExchange::isValidDate(const std::string& date) const {
    if (date.length() != 10 || date[4] != '-' || date[7] != '-') {
        return false;
    }

    for (int i = 0; i < 10; ++i) {
        if (i == 4 || i == 7) continue;
        if (!std::isdigit(date[i])) {
            return false;
        }
    }

    int year = std::atoi(date.substr(0, 4).c_str());
    int month = std::atoi(date.substr(5, 2).c_str());
    int day = std::atoi(date.substr(8, 2).c_str());

    if (year < 2009 || year > 2023) return false; // Bitcoin was created in 2009
    if (month < 1 || month > 12) return false;
    
    // Simple day validation (doesn't account for exact days in each month)
    if (day < 1 || day > 31) return false;

    return true;
}

bool BitcoinExchange::isValidValue(const std::string& valueStr, float& value) const {
    char* endptr;
    value = std::strtof(valueStr.c_str(), &endptr);
    
    if (*endptr != '\0' && *endptr != ' ') {
        return false;
    }
    if (value < 0) {
        return false;
    }
    if (value > 1000) {
        return false;
    }
    return true;
}

std::string BitcoinExchange::findClosestDate(const std::string& date) const {
    std::map<std::string, float>::const_iterator it = _exchangeRates.lower_bound(date);
    
    if (it == _exchangeRates.begin()) {
        if (it->first == date) {
            return date;
        } else {
            return ""; // No earlier date available
        }
    }
    
    if (it != _exchangeRates.end() && it->first == date) {
        return date;
    } else {
        --it; // Get the previous (lower) date
        return it->first;
    }
}

void BitcoinExchange::processInputFile(const std::string& inputFile) const {
    std::ifstream file(inputFile.c_str());
    if (!file.is_open()) {
        std::cerr << "Error: could not open file." << std::endl;
        return;
    }

    std::string line;
    // Skip header line
    std::getline(file, line);
    
    while (std::getline(file, line)) {
        std::istringstream iss(line);
        std::string date;
        std::string valueStr;
        
        if (std::getline(iss, date, '|') && std::getline(iss, valueStr)) {
            // Trim whitespace
            date.erase(date.find_last_not_of(" \t") + 1);
            valueStr.erase(0, valueStr.find_first_not_of(" \t"));
            valueStr.erase(valueStr.find_last_not_of(" \t") + 1);
            
            if (!isValidDate(date)) {
                std::cerr << "Error: bad input => " << date << std::endl;
                continue;
            }
            
            float value;
            if (!isValidValue(valueStr, value)) {
                if (value < 0) {
                    std::cerr << "Error: not a positive number." << std::endl;
                } else if (value > 1000) {
                    std::cerr << "Error: too large a number." << std::endl;
                } else {
                    std::cerr << "Error: invalid value format." << std::endl;
                }
                continue;
            }
            
            std::string closestDate = findClosestDate(date);
            if (closestDate.empty()) {
                std::cerr << "Error: no data available for date " << date << " or earlier." << std::endl;
                continue;
            }
            
            float rate = _exchangeRates.at(closestDate);
            float result = value * rate;
            
            std::cout << date << " => " << value << " = " << result << std::endl;
        } else {
            std::cerr << "Error: bad input => " << line << std::endl;
        }
    }
    file.close();
}

### File: BitcoinExchange.hpp
#ifndef BITCOINEXCHANGE_HPP
#define BITCOINEXCHANGE_HPP

#include <map>
#include <string>

class BitcoinExchange {
private:
    std::map<std::string, float> _exchangeRates;
    
    bool isValidDate(const std::string& date) const;
    bool isValidValue(const std::string& valueStr, float& value) const;
    void loadDatabase(const std::string& databaseFile);
    std::string findClosestDate(const std::string& date) const;

public:
    BitcoinExchange();
    BitcoinExchange(const std::string& databaseFile);
    BitcoinExchange(const BitcoinExchange& other);
    ~BitcoinExchange();
    BitcoinExchange& operator=(const BitcoinExchange& other);

    void processInputFile(const std::string& inputFile) const;
};

#endif


