Exercise : 02
PmergeMe
Turn-in directory : ex02/
Files to turn in : Makefile, main.cpp, PmergeMe.{cpp, hpp}
Forbidden functions : None
You must create a program with these constraints:
• The name of the program is PmergeMe.
• Your program must be able to use a positive integer sequence as an argument.
• Your program must use the merge-insert sort algorithm to sort the positive integer
sequence.
To clarify, yes, you need to use the Ford-Johnson algorithm.
(source: Art Of Computer Programming, Vol.3. Merge Insertion,
Page 184.)
• If an error occurs during program execution, an error message should be displayed
on the standard error.
You must use at least two different containers in your code to
validate this exercise. Your program must be able to handle at
least 3000 different integers.

It is strongly advised to implement your algorithm for each container
and thus to avoid using a generic function.
Here are some additional guidelines on the information you should display line by line
on the standard output:
• On the first line you must display an explicit text followed by the unsorted positive
integer sequence.
• On the second line you must display an explicit text followed by the sorted positive
integer sequence.
• On the third line, you must display an explicit message indicating the time taken
by your algorithm, specifying the first container used to sort the positive integer
sequence.
• On the last line you must display an explicit text indicating the time used by
your algorithm by specifying the second container used to sort the positive integer
sequence.
The format for the display of the time used to carry out your sorting
is free but the precision chosen must allow to clearly see the
difference between the two containers used.
Here is an example of standard use:
$> ./PmergeMe 3 5 9 7 4
Before: 3 5 9 7 4
After:
3 4 5 7 9
Time to process a range of 5 elements with std::[..] : 0.00031 us
Time to process a range of 5 elements with std::[..] : 0.00014 us
$> ./PmergeMe `shuf -i 1-100000 -n 3000 | tr "\n" " "`
Before: 141 79 526 321 [...]
After:
79 141 321 526 [...]
Time to process a range of 3000 elements with std::[..] : 62.14389 us
Time to process a range of 3000 elements with std::[..] : 69.27212 us
$> ./PmergeMe "-1" "2"
Error
$> # For OSX USER:
$> ./PmergeMe `jot -r 3000 1 100000 | tr '\n' ' '`
[...]
$>
The indication of the time is deliberately strange in this example.
Of course you have to indicate the time used to perform all your
operations, both the sorting part and the data management part.

Warning: The container(s) you used in the previous exercises are
forbidden here.
The management of errors related to duplicates is left to your
discretion.

### File: main.cpp
#include "PmergeMe.hpp"
#include <iostream>

int main(int argc, char** argv) {
    try {
        PmergeMe sorter;
        sorter.sort(argc, argv);
    } catch (const std::exception& e) {
        std::cerr << e.what() << std::endl;
        return 1;
    }
    return 0;
}

### File: PmergeMe.cpp
#include "PmergeMe.hpp"
#include <sstream>
#include <stdexcept>
#include <cmath>

int PmergeMe::_comparisonCount = 0;

PmergeMe::PmergeMe() {}

PmergeMe::PmergeMe(const PmergeMe& other) {
    *this = other;
}

PmergeMe::~PmergeMe() {}

PmergeMe& PmergeMe::operator=(const PmergeMe& other) {
    if (this != &other) {
        this->_vec = other._vec;
        this->_deq = other._deq;
    }
    return *this;
}

bool PmergeMe::_compare(int a, int b) {
    _comparisonCount++;
    return a < b;
}

void PmergeMe::_validateInput(int argc, char** argv) {
    if (argc < 2) {
        throw std::runtime_error("Error: no input provided.");
    }

    for (int i = 1; i < argc; ++i) {
        std::string arg = argv[i];
        if (arg.empty() || arg.find_first_not_of("0123456789") != std::string::npos) {
            throw std::runtime_error("Error: invalid input '" + arg + "'");
        }

        long num;
        std::istringstream iss(arg);
        iss >> num;
        if (num < 0 || num > INT_MAX || iss.fail() || !iss.eof()) {
            throw std::runtime_error("Error: invalid number '" + arg + "'");
        }

        _vec.push_back(static_cast<int>(num));
        _deq.push_back(static_cast<int>(num));
    }
}

size_t PmergeMe::_jacobsthal(size_t n) const {
    // Jacobsthal numbers: J(n) = J(n-1) + 2*J(n-2)
    // Sequence: 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, ...
    if (n == 0) return 0;
    if (n == 1) return 1;
    return _jacobsthal(n - 1) + 2 * _jacobsthal(n - 2);
}

// Vector implementation
void PmergeMe::_insertVec(std::vector<int>& main, std::vector<int>& pend, size_t jacobIndex) {
    size_t jacob = _jacobsthal(jacobIndex);
    size_t prevJacob = _jacobsthal(jacobIndex - 1);

    if (jacob > pend.size()) {
        if (prevJacob >= pend.size()) {
            return;
        }
        jacob = pend.size();
    }

    for (size_t i = jacob; i > prevJacob; --i) {
        if (i - 1 >= pend.size()) continue;

        std::vector<int>::iterator bound = main.begin() + (2 * (i - 1) + 1);
        if (bound > main.end()) bound = main.end();

        std::vector<int>::iterator pos = std::upper_bound(
            main.begin(), bound, pend[i - 1], 
            [this](int a, int b) { return _compare(a, b); }
        );
        main.insert(pos, pend[i - 1]);
    }
}

void PmergeMe::_mergeInsertVec(std::vector<int>& vec) {
    if (vec.size() <= 1) return;

    // Step 1: Pairwise comparison and recursive sort
    std::vector<std::pair<int, int> > pairs;
    bool hasOdd = vec.size() % 2 != 0;
    int odd = hasOdd ? vec.back() : 0;

    for (size_t i = 0; i < vec.size() - hasOdd; i += 2) {
        if (_compare(vec[i + 1], vec[i])) {
            pairs.push_back(std::make_pair(vec[i + 1], vec[i]));
        } else {
            pairs.push_back(std::make_pair(vec[i], vec[i + 1]));
        }
    }

    // Recursively sort the larger elements
    std::vector<int> largerElements;
    for (size_t i = 0; i < pairs.size(); ++i) {
        largerElements.push_back(pairs[i].second);
    }

    _mergeInsertVec(largerElements);

    // Rebuild pairs with sorted order
    std::vector<std::pair<int, int> > sortedPairs;
    for (size_t i = 0; i < largerElements.size(); ++i) {
        for (size_t j = 0; j < pairs.size(); ++j) {
            if (pairs[j].second == largerElements[i]) {
                sortedPairs.push_back(pairs[j]);
                pairs.erase(pairs.begin() + j);
                break;
            }
        }
    }

    // Step 2: Build main chain and pend
    std::vector<int> main;
    std::vector<int> pend;

    main.push_back(sortedPairs[0].first);
    for (size_t i = 0; i < sortedPairs.size(); ++i) {
        main.push_back(sortedPairs[i].second);
        if (i > 0) {
            pend.push_back(sortedPairs[i].first);
        }
    }
    if (hasOdd) pend.push_back(odd);

    // Step 3: Binary insertion using Jacobsthal sequence
    size_t jacobIndex = 3;
    while (true) {
        size_t prevSize = pend.size();
        _insertVec(main, pend, jacobIndex);
        if (pend.size() == prevSize) break;
        jacobIndex++;
    }

    vec = main;
}

void PmergeMe::_sortVec(std::vector<int>& vec) {
    clock_t start = clock();
    _mergeInsertVec(vec);
    clock_t end = clock();
    double elapsed = static_cast<double>(end - start) / CLOCKS_PER_SEC * 1000000;
    
    std::cout << "Time to process a range of " << vec.size()
              << " elements with std::vector : " << std::fixed << std::setprecision(5)
              << elapsed << " us" << std::endl;
}

// Deque implementation (similar to vector but with deque operations)
void PmergeMe::_insertDeq(std::deque<int>& main, std::deque<int>& pend, size_t jacobIndex) {
    size_t jacob = _jacobsthal(jacobIndex);
    size_t prevJacob = _jacobsthal(jacobIndex - 1);

    if (jacob > pend.size()) {
        if (prevJacob >= pend.size()) {
            return;
        }
        jacob = pend.size();
    }

    for (size_t i = jacob; i > prevJacob; --i) {
        if (i - 1 >= pend.size()) continue;

        std::deque<int>::iterator bound = main.begin() + (2 * (i - 1) + 1);
        if (bound > main.end()) bound = main.end();

        std::deque<int>::iterator pos = std::upper_bound(
            main.begin(), bound, pend[i - 1],
            [this](int a, int b) { return _compare(a, b); }
        );
        main.insert(pos, pend[i - 1]);
    }
}

void PmergeMe::_mergeInsertDeq(std::deque<int>& deq) {
    if (deq.size() <= 1) return;

    std::vector<std::pair<int, int> > pairs;
    bool hasOdd = deq.size() % 2 != 0;
    int odd = hasOdd ? deq.back() : 0;

    for (size_t i = 0; i < deq.size() - hasOdd; i += 2) {
        if (_compare(deq[i + 1], deq[i])) {
            pairs.push_back(std::make_pair(deq[i + 1], deq[i]));
        } else {
            pairs.push_back(std::make_pair(deq[i], deq[i + 1]));
        }
    }

    std::vector<int> largerElements;
    for (size_t i = 0; i < pairs.size(); ++i) {
        largerElements.push_back(pairs[i].second);
    }

    _mergeInsertVec(largerElements); // Reuse vector implementation for recursive sorting

    std::vector<std::pair<int, int> > sortedPairs;
    for (size_t i = 0; i < largerElements.size(); ++i) {
        for (size_t j = 0; j < pairs.size(); ++j) {
            if (pairs[j].second == largerElements[i]) {
                sortedPairs.push_back(pairs[j]);
                pairs.erase(pairs.begin() + j);
                break;
            }
        }
    }

    std::deque<int> main;
    std::deque<int> pend;

    main.push_back(sortedPairs[0].first);
    for (size_t i = 0; i < sortedPairs.size(); ++i) {
        main.push_back(sortedPairs[i].second);
        if (i > 0) {
            pend.push_back(sortedPairs[i].first);
        }
    }
    if (hasOdd) pend.push_back(odd);

    size_t jacobIndex = 3;
    while (true) {
        size_t prevSize = pend.size();
        _insertDeq(main, pend, jacobIndex);
        if (pend.size() == prevSize) break;
        jacobIndex++;
    }

    deq = main;
}

void PmergeMe::_sortDeq(std::deque<int>& deq) {
    clock_t start = clock();
    _mergeInsertDeq(deq);
    clock_t end = clock();
    double elapsed = static_cast<double>(end - start) / CLOCKS_PER_SEC * 1000000;
    
    std::cout << "Time to process a range of " << deq.size()
              << " elements with std::deque  : " << std::fixed << std::setprecision(5)
              << elapsed << " us" << std::endl;
}

int PmergeMe::getComparisonCount() {
    return _comparisonCount;
}

void PmergeMe::resetComparisonCount() {
    _comparisonCount = 0;
}

void PmergeMe::sort(int argc, char** argv) {
    resetComparisonCount();
    _validateInput(argc, argv);

    std::vector<int> vecCopy = _vec;
    std::deque<int> deqCopy = _deq;

    std::cout << "Before: ";
    for (size_t i = 0; i < vecCopy.size(); ++i) {
        std::cout << vecCopy[i] << " ";
    }
    std::cout << std::endl;

    _sortVec(_vec);
    _sortDeq(_deq);

    std::cout << "After: ";
    for (size_t i = 0; i < _vec.size(); ++i) {
        std::cout << _vec[i] << " ";
    }
    std::cout << std::endl;

    // Verify both containers produced the same result
    if (_vec != std::vector<int>(_deq.begin(), _deq.end())) {
        throw std::runtime_error("Error: vector and deque implementations produced different results");
    }
}


